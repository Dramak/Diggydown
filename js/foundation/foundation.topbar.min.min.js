(function (h, e, f, g) {
    Foundation.libs.topbar = {name: "topbar", version: "4.3.2", settings: {index: 0, stickyClass: "sticky", custom_back_text: true, back_text: "Back", is_hover: true, mobile_show_parent_link: false, scrolltop: true, init: false}, init: function (b, a, c) {
        Foundation.inherit(this, "data_options addCustomRule");
        var d = this;
        if (typeof a === "object") {
            h.extend(true, this.settings, a)
        } else {
            if (typeof c !== "undefined") {
                h.extend(true, this.settings, c)
            }
        }
        if (typeof a !== "string") {
            h(".top-bar, [data-topbar]").each(function () {
                h.extend(true, d.settings, d.data_options(h(this)));
                d.settings.$w = h(e);
                d.settings.$topbar = h(this);
                d.settings.$section = d.settings.$topbar.find("section");
                d.settings.$titlebar = d.settings.$topbar.children("ul").first();
                d.settings.$topbar.data("index", 0);
                var k = d.settings.$topbar.parent();
                if (k.hasClass("fixed") || k.hasClass(d.settings.stickyClass)) {
                    d.settings.$topbar.data("height", d.outerHeight(k));
                    d.settings.$topbar.data("stickyoffset", k.offset().top)
                } else {
                    d.settings.$topbar.data("height", d.outerHeight(d.settings.$topbar))
                }
                var l = h("<div class='top-bar-js-breakpoint'/>").insertAfter(d.settings.$topbar);
                d.settings.breakPoint = l.width();
                l.remove();
                d.assemble();
                if (d.settings.is_hover) {
                    d.settings.$topbar.find(".has-dropdown").addClass("not-click")
                }
                d.addCustomRule(".f-topbar-fixed { padding-top: " + d.settings.$topbar.data("height") + "px }");
                if (d.settings.$topbar.parent().hasClass("fixed")) {
                    h("body").addClass("f-topbar-fixed")
                }
            });
            if (!d.settings.init) {
                this.events()
            }
            return this.settings.init
        } else {
            return this[a].call(this, c)
        }
    }, toggle: function () {
        var b = this;
        var c = h(".top-bar, [data-topbar]"), a = c.find("section, .section");
        if (b.breakpoint()) {
            if (!b.rtl) {
                a.css({left: "0%"});
                a.find(">.name").css({left: "100%"})
            } else {
                a.css({right: "0%"});
                a.find(">.name").css({right: "100%"})
            }
            a.find("li.moved").removeClass("moved");
            c.data("index", 0);
            c.toggleClass("expanded").css("height", "")
        }
        if (b.settings.scrolltop) {
            if (!c.hasClass("expanded")) {
                if (c.hasClass("fixed")) {
                    c.parent().addClass("fixed");
                    c.removeClass("fixed");
                    h("body").addClass("f-topbar-fixed")
                }
            } else {
                if (c.parent().hasClass("fixed")) {
                    if (b.settings.scrolltop) {
                        c.parent().removeClass("fixed");
                        c.addClass("fixed");
                        h("body").removeClass("f-topbar-fixed");
                        e.scrollTo(0, 0)
                    } else {
                        c.parent().removeClass("expanded")
                    }
                }
            }
        } else {
            if (c.parent().hasClass(b.settings.stickyClass)) {
                c.parent().addClass("fixed")
            }
            if (c.parent().hasClass("fixed")) {
                if (!c.hasClass("expanded")) {
                    c.removeClass("fixed");
                    c.parent().removeClass("expanded");
                    b.updateStickyPositioning()
                } else {
                    c.addClass("fixed");
                    c.parent().addClass("expanded")
                }
            }
        }
    }, timer: null, events: function () {
        var a = this;
        h(this.scope).off(".fndtn.topbar").on("click.fndtn.topbar", ".top-bar .toggle-topbar, [data-topbar] .toggle-topbar",function (b) {
            b.preventDefault();
            a.toggle()
        }).on("click.fndtn.topbar", ".top-bar li.has-dropdown",function (b) {
            var k = h(this), c = h(b.target), d = k.closest("[data-topbar], .top-bar"), l = d.data("topbar");
            if (c.data("revealId")) {
                a.toggle();
                return
            }
            if (a.breakpoint()) {
                return
            }
            if (a.settings.is_hover && !Modernizr.touch) {
                return
            }
            b.stopImmediatePropagation();
            if (c[0].nodeName === "A" && c.parent().hasClass("has-dropdown")) {
                b.preventDefault()
            }
            if (k.hasClass("hover")) {
                k.removeClass("hover").find("li").removeClass("hover");
                k.parents("li.hover").removeClass("hover")
            } else {
                k.addClass("hover")
            }
        }).on("click.fndtn.topbar", ".top-bar .has-dropdown>a, [data-topbar] .has-dropdown>a", function (b) {
            if (a.breakpoint() && h(e).width() != a.settings.breakPoint) {
                b.preventDefault();
                var c = h(this), m = c.closest(".top-bar, [data-topbar]"), d = m.find("section, .section"), l = c.next(".dropdown").outerHeight(), n = c.closest("li");
                m.data("index", m.data("index") + 1);
                n.addClass("moved");
                if (!a.rtl) {
                    d.css({left: -(100 * m.data("index")) + "%"});
                    d.find(">.name").css({left: 100 * m.data("index") + "%"})
                } else {
                    d.css({right: -(100 * m.data("index")) + "%"});
                    d.find(">.name").css({right: 100 * m.data("index") + "%"})
                }
                m.css("height", a.outerHeight(c.siblings("ul"), true) + a.settings.$topbar.data("height"))
            }
        });
        h(e).on("resize.fndtn.topbar", function () {
            if (typeof a.settings.$topbar === "undefined") {
                return
            }
            var c = a.settings.$topbar.parent("." + this.settings.stickyClass);
            var b;
            if (!a.breakpoint()) {
                var d = a.settings.$topbar.hasClass("expanded");
                h(".top-bar, [data-topbar]").css("height", "").removeClass("expanded").find("li").removeClass("hover");
                if (d) {
                    a.toggle()
                }
            }
            if (c.length > 0) {
                if (c.hasClass("fixed")) {
                    c.removeClass("fixed");
                    b = c.offset().top;
                    if (h(f.body).hasClass("f-topbar-fixed")) {
                        b -= a.settings.$topbar.data("height")
                    }
                    a.settings.$topbar.data("stickyoffset", b);
                    c.addClass("fixed")
                } else {
                    b = c.offset().top;
                    a.settings.$topbar.data("stickyoffset", b)
                }
            }
        }.bind(this));
        h("body").on("click.fndtn.topbar", function (b) {
            var c = h(b.target).closest("li").closest("li.hover");
            if (c.length > 0) {
                return
            }
            h(".top-bar li, [data-topbar] li").removeClass("hover")
        });
        h(this.scope).on("click.fndtn", ".top-bar .has-dropdown .back, [data-topbar] .has-dropdown .back", function (b) {
            b.preventDefault();
            var c = h(this), m = c.closest(".top-bar, [data-topbar]"), d = m.find("section, .section"), l = c.closest("li.moved"), n = l.parent();
            m.data("index", m.data("index") - 1);
            if (!a.rtl) {
                d.css({left: -(100 * m.data("index")) + "%"});
                d.find(">.name").css({left: 100 * m.data("index") + "%"})
            } else {
                d.css({right: -(100 * m.data("index")) + "%"});
                d.find(">.name").css({right: 100 * m.data("index") + "%"})
            }
            if (m.data("index") === 0) {
                m.css("height", "")
            } else {
                m.css("height", a.outerHeight(n, true) + a.settings.$topbar.data("height"))
            }
            setTimeout(function () {
                l.removeClass("moved")
            }, 300)
        })
    }, breakpoint: function () {
        return h(f).width() <= this.settings.breakPoint || h("html").hasClass("lt-ie9")
    }, assemble: function () {
        var a = this;
        this.settings.$section.detach();
        this.settings.$section.find(".has-dropdown>a").each(function () {
            var j = h(this), b = j.siblings(".dropdown"), d = j.attr("href");
            if (a.settings.mobile_show_parent_link && d && d.length > 1) {
                var c = h('<li class="title back js-generated"><h5><a href="#"></a></h5></li><li><a class="parent-link js-generated" href="' + d + '">' + j.text() + "</a></li>")
            } else {
                var c = h('<li class="title back js-generated"><h5><a href="#"></a></h5></li>')
            }
            if (a.settings.custom_back_text == true) {
                c.find("h5>a").html(a.settings.back_text)
            } else {
                c.find("h5>a").html("&laquo; " + j.html())
            }
            b.prepend(c)
        });
        this.settings.$section.appendTo(this.settings.$topbar);
        this.sticky()
    }, height: function (b) {
        var a = 0, c = this;
        b.find("> li").each(function () {
            a += c.outerHeight(h(this), true)
        });
        return a
    }, sticky: function () {
        var a = h(e), b = this;
        a.scroll(function () {
            b.updateStickyPositioning()
        })
    }, updateStickyPositioning: function () {
        var c = "." + this.settings.stickyClass;
        var b = h(e);
        if (h(c).length > 0) {
            var a = this.settings.$topbar.data("stickyoffset");
            if (!h(c).hasClass("expanded")) {
                if (b.scrollTop() > (a)) {
                    if (!h(c).hasClass("fixed")) {
                        h(c).addClass("fixed");
                        h("body").addClass("f-topbar-fixed")
                    }
                } else {
                    if (b.scrollTop() <= a) {
                        if (h(c).hasClass("fixed")) {
                            h(c).removeClass("fixed");
                            h("body").removeClass("f-topbar-fixed")
                        }
                    }
                }
            }
        }
    }, off: function () {
        h(this.scope).off(".fndtn.topbar");
        h(e).off(".fndtn.topbar")
    }, reflow: function () {
    }}
}(Foundation.zj, this, this.document));